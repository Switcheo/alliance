// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alliance/alliance/events.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DelegateAllianceEvent struct {
	AllianceSender string                                  `protobuf:"bytes,1,opt,name=allianceSender,proto3" json:"allianceSender,omitempty"`
	Validator      string                                  `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	Coin           github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=coin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"coin"`
	NewShares      cosmossdk_io_math.LegacyDec             `protobuf:"bytes,4,opt,name=newShares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"newShares"`
}

func (m *DelegateAllianceEvent) Reset()         { *m = DelegateAllianceEvent{} }
func (m *DelegateAllianceEvent) String() string { return proto.CompactTextString(m) }
func (*DelegateAllianceEvent) ProtoMessage()    {}
func (*DelegateAllianceEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f0986b8e367b590, []int{0}
}
func (m *DelegateAllianceEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegateAllianceEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegateAllianceEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegateAllianceEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegateAllianceEvent.Merge(m, src)
}
func (m *DelegateAllianceEvent) XXX_Size() int {
	return m.Size()
}
func (m *DelegateAllianceEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegateAllianceEvent.DiscardUnknown(m)
}

var xxx_messageInfo_DelegateAllianceEvent proto.InternalMessageInfo

func (m *DelegateAllianceEvent) GetAllianceSender() string {
	if m != nil {
		return m.AllianceSender
	}
	return ""
}

func (m *DelegateAllianceEvent) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

type UndelegateAllianceEvent struct {
	AllianceSender string                                  `protobuf:"bytes,1,opt,name=allianceSender,proto3" json:"allianceSender,omitempty"`
	Validator      string                                  `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	Coin           github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=coin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"coin"`
	CompletionTime time.Time                               `protobuf:"bytes,4,opt,name=completionTime,proto3,stdtime" json:"completionTime"`
}

func (m *UndelegateAllianceEvent) Reset()         { *m = UndelegateAllianceEvent{} }
func (m *UndelegateAllianceEvent) String() string { return proto.CompactTextString(m) }
func (*UndelegateAllianceEvent) ProtoMessage()    {}
func (*UndelegateAllianceEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f0986b8e367b590, []int{1}
}
func (m *UndelegateAllianceEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegateAllianceEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegateAllianceEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegateAllianceEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegateAllianceEvent.Merge(m, src)
}
func (m *UndelegateAllianceEvent) XXX_Size() int {
	return m.Size()
}
func (m *UndelegateAllianceEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegateAllianceEvent.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegateAllianceEvent proto.InternalMessageInfo

func (m *UndelegateAllianceEvent) GetAllianceSender() string {
	if m != nil {
		return m.AllianceSender
	}
	return ""
}

func (m *UndelegateAllianceEvent) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *UndelegateAllianceEvent) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

type RedelegateAllianceEvent struct {
	AllianceSender       string                                  `protobuf:"bytes,1,opt,name=allianceSender,proto3" json:"allianceSender,omitempty"`
	SourceValidator      string                                  `protobuf:"bytes,2,opt,name=sourceValidator,proto3" json:"sourceValidator,omitempty"`
	DestinationValidator string                                  `protobuf:"bytes,3,opt,name=destinationValidator,proto3" json:"destinationValidator,omitempty"`
	Coin                 github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=coin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"coin"`
	CompletionTime       time.Time                               `protobuf:"bytes,5,opt,name=completionTime,proto3,stdtime" json:"completionTime"`
}

func (m *RedelegateAllianceEvent) Reset()         { *m = RedelegateAllianceEvent{} }
func (m *RedelegateAllianceEvent) String() string { return proto.CompactTextString(m) }
func (*RedelegateAllianceEvent) ProtoMessage()    {}
func (*RedelegateAllianceEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f0986b8e367b590, []int{2}
}
func (m *RedelegateAllianceEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedelegateAllianceEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedelegateAllianceEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedelegateAllianceEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedelegateAllianceEvent.Merge(m, src)
}
func (m *RedelegateAllianceEvent) XXX_Size() int {
	return m.Size()
}
func (m *RedelegateAllianceEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RedelegateAllianceEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RedelegateAllianceEvent proto.InternalMessageInfo

func (m *RedelegateAllianceEvent) GetAllianceSender() string {
	if m != nil {
		return m.AllianceSender
	}
	return ""
}

func (m *RedelegateAllianceEvent) GetSourceValidator() string {
	if m != nil {
		return m.SourceValidator
	}
	return ""
}

func (m *RedelegateAllianceEvent) GetDestinationValidator() string {
	if m != nil {
		return m.DestinationValidator
	}
	return ""
}

func (m *RedelegateAllianceEvent) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

type ClaimAllianceRewardsEvent struct {
	AllianceSender string                                    `protobuf:"bytes,1,opt,name=allianceSender,proto3" json:"allianceSender,omitempty"`
	Validator      string                                    `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	Coins          []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,rep,name=coins,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"coins"`
}

func (m *ClaimAllianceRewardsEvent) Reset()         { *m = ClaimAllianceRewardsEvent{} }
func (m *ClaimAllianceRewardsEvent) String() string { return proto.CompactTextString(m) }
func (*ClaimAllianceRewardsEvent) ProtoMessage()    {}
func (*ClaimAllianceRewardsEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f0986b8e367b590, []int{3}
}
func (m *ClaimAllianceRewardsEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimAllianceRewardsEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimAllianceRewardsEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimAllianceRewardsEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimAllianceRewardsEvent.Merge(m, src)
}
func (m *ClaimAllianceRewardsEvent) XXX_Size() int {
	return m.Size()
}
func (m *ClaimAllianceRewardsEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimAllianceRewardsEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimAllianceRewardsEvent proto.InternalMessageInfo

func (m *ClaimAllianceRewardsEvent) GetAllianceSender() string {
	if m != nil {
		return m.AllianceSender
	}
	return ""
}

func (m *ClaimAllianceRewardsEvent) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

type DeductAllianceAssetsEvent struct {
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *DeductAllianceAssetsEvent) Reset()         { *m = DeductAllianceAssetsEvent{} }
func (m *DeductAllianceAssetsEvent) String() string { return proto.CompactTextString(m) }
func (*DeductAllianceAssetsEvent) ProtoMessage()    {}
func (*DeductAllianceAssetsEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f0986b8e367b590, []int{4}
}
func (m *DeductAllianceAssetsEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeductAllianceAssetsEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeductAllianceAssetsEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeductAllianceAssetsEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeductAllianceAssetsEvent.Merge(m, src)
}
func (m *DeductAllianceAssetsEvent) XXX_Size() int {
	return m.Size()
}
func (m *DeductAllianceAssetsEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_DeductAllianceAssetsEvent.DiscardUnknown(m)
}

var xxx_messageInfo_DeductAllianceAssetsEvent proto.InternalMessageInfo

func (m *DeductAllianceAssetsEvent) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func init() {
	proto.RegisterType((*DelegateAllianceEvent)(nil), "alliance.alliance.DelegateAllianceEvent")
	proto.RegisterType((*UndelegateAllianceEvent)(nil), "alliance.alliance.UndelegateAllianceEvent")
	proto.RegisterType((*RedelegateAllianceEvent)(nil), "alliance.alliance.RedelegateAllianceEvent")
	proto.RegisterType((*ClaimAllianceRewardsEvent)(nil), "alliance.alliance.ClaimAllianceRewardsEvent")
	proto.RegisterType((*DeductAllianceAssetsEvent)(nil), "alliance.alliance.DeductAllianceAssetsEvent")
}

func init() { proto.RegisterFile("alliance/alliance/events.proto", fileDescriptor_0f0986b8e367b590) }

var fileDescriptor_0f0986b8e367b590 = []byte{
	// 556 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x55, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0x8e, 0x93, 0xf4, 0xa7, 0x5f, 0xb6, 0x52, 0x11, 0x56, 0x50, 0x9d, 0x20, 0x39, 0x51, 0x2e,
	0xe4, 0x92, 0x75, 0x53, 0x24, 0xce, 0x24, 0x0d, 0x17, 0x14, 0x09, 0xc9, 0x29, 0x1c, 0x38, 0x00,
	0x1b, 0x7b, 0x70, 0x56, 0xb5, 0x77, 0xa3, 0xdd, 0x4d, 0x4a, 0x2e, 0x3c, 0x43, 0xef, 0xbc, 0x01,
	0xe7, 0xbe, 0x00, 0x9c, 0x7a, 0xac, 0x7a, 0x42, 0x1c, 0x5a, 0x94, 0x3c, 0x04, 0x57, 0x64, 0x7b,
	0x5d, 0xa3, 0x08, 0x29, 0x95, 0xf8, 0x77, 0xe0, 0x94, 0xd9, 0xcc, 0x7c, 0xdf, 0x37, 0xdf, 0xcc,
	0x48, 0x46, 0x36, 0x09, 0x43, 0x4a, 0x98, 0x07, 0xce, 0x75, 0x00, 0x73, 0x60, 0x4a, 0xe2, 0xa9,
	0xe0, 0x8a, 0x9b, 0xb7, 0xb3, 0xbf, 0x71, 0x16, 0xd4, 0xab, 0x01, 0x0f, 0x78, 0x92, 0x75, 0xe2,
	0x28, 0x2d, 0xac, 0xdb, 0x1e, 0x97, 0x11, 0x97, 0xce, 0x98, 0x48, 0x70, 0xe6, 0xdd, 0x31, 0x28,
	0xd2, 0x75, 0x3c, 0x4e, 0x99, 0xce, 0xd7, 0xd2, 0xfc, 0xcb, 0x14, 0x98, 0x3e, 0x74, 0xaa, 0x11,
	0x70, 0x1e, 0x84, 0xe0, 0x24, 0xaf, 0xf1, 0xec, 0xb5, 0xa3, 0x68, 0x04, 0x52, 0x91, 0x68, 0x9a,
	0x16, 0xb4, 0x3e, 0x16, 0xd1, 0x9d, 0x01, 0x84, 0x10, 0x10, 0x05, 0x3d, 0xdd, 0xc6, 0xa3, 0xb8,
	0x4b, 0xf3, 0x21, 0xda, 0xc9, 0xfa, 0x1a, 0x01, 0xf3, 0x41, 0x58, 0x46, 0xd3, 0x68, 0x57, 0xfa,
	0xd6, 0xc5, 0x69, 0xa7, 0xaa, 0x45, 0x7a, 0xbe, 0x2f, 0x40, 0xca, 0x91, 0x12, 0x94, 0x05, 0xee,
	0x5a, 0xbd, 0xf9, 0x00, 0x55, 0xe6, 0x24, 0xa4, 0x3e, 0x51, 0x5c, 0x58, 0xc5, 0x0d, 0xe0, 0xbc,
	0xd4, 0x7c, 0x81, 0xca, 0xb1, 0x3b, 0xab, 0xd4, 0x34, 0xda, 0xdb, 0xfb, 0x35, 0xac, 0xeb, 0x63,
	0xfb, 0x58, 0xdb, 0xc7, 0x07, 0x9c, 0xb2, 0xbe, 0x73, 0x76, 0xd9, 0x28, 0x7c, 0xbe, 0x6c, 0xdc,
	0x0b, 0xa8, 0x9a, 0xcc, 0xc6, 0xd8, 0xe3, 0x91, 0xb6, 0xaf, 0x7f, 0x3a, 0xd2, 0x3f, 0x72, 0xd4,
	0x62, 0x0a, 0x32, 0x01, 0xb8, 0x09, 0xaf, 0xf9, 0x04, 0x55, 0x18, 0x1c, 0x8f, 0x26, 0x44, 0x80,
	0xb4, 0xca, 0x49, 0x5f, 0x5d, 0xcd, 0x74, 0x37, 0xc5, 0x49, 0xff, 0x08, 0x53, 0xee, 0x44, 0x44,
	0x4d, 0xf0, 0x10, 0x02, 0xe2, 0x2d, 0x06, 0xe0, 0x5d, 0x9c, 0x76, 0x90, 0x6e, 0x65, 0x00, 0x9e,
	0x9b, 0x73, 0xb4, 0x3e, 0x14, 0xd1, 0xee, 0x53, 0xe6, 0xff, 0x63, 0x63, 0x1c, 0xa2, 0x1d, 0x8f,
	0x47, 0xd3, 0x10, 0x14, 0xe5, 0xec, 0x90, 0x46, 0x90, 0xcc, 0x72, 0x7b, 0xbf, 0x8e, 0xd3, 0xa3,
	0xc3, 0xd9, 0xd1, 0xe1, 0xc3, 0xec, 0xe8, 0xfa, 0xff, 0xc7, 0x52, 0x27, 0x57, 0x0d, 0xc3, 0x5d,
	0xc3, 0xb6, 0xde, 0x95, 0xd0, 0xae, 0x0b, 0xbf, 0x6b, 0x86, 0x7d, 0x74, 0x4b, 0xf2, 0x99, 0xf0,
	0xe0, 0xd9, 0x8d, 0x27, 0xb9, 0x0e, 0x30, 0x87, 0xa8, 0xea, 0x83, 0x54, 0x94, 0x91, 0xb8, 0xe9,
	0x9c, 0xa8, 0xb4, 0x81, 0xe8, 0x87, 0xa8, 0xeb, 0xed, 0x94, 0xff, 0xd8, 0x76, 0xb6, 0x7e, 0x62,
	0x3b, 0x5f, 0x0d, 0x54, 0x3b, 0x08, 0x09, 0x8d, 0xb2, 0xc5, 0xb8, 0x70, 0x4c, 0x84, 0x2f, 0xff,
	0xf6, 0x8d, 0xbf, 0x42, 0x5b, 0xb1, 0x5b, 0x69, 0x95, 0x9a, 0xa5, 0x5f, 0x3c, 0xc6, 0x94, 0xb8,
	0xf5, 0x16, 0xd5, 0x06, 0xe0, 0xcf, 0x3c, 0x95, 0x39, 0xef, 0x49, 0x09, 0x4a, 0x1b, 0x27, 0x99,
	0xbc, 0xb1, 0x49, 0x7e, 0x2f, 0x96, 0x7f, 0x7f, 0xd5, 0x68, 0xdf, 0x50, 0x5e, 0x6a, 0xfd, 0xfe,
	0xe3, 0xb3, 0xa5, 0x6d, 0x9c, 0x2f, 0x6d, 0xe3, 0xcb, 0xd2, 0x36, 0x4e, 0x56, 0x76, 0xe1, 0x7c,
	0x65, 0x17, 0x3e, 0xad, 0xec, 0xc2, 0xf3, 0xbd, 0xef, 0xa8, 0x14, 0x08, 0x41, 0x3a, 0x11, 0x67,
	0xb0, 0xc8, 0xbf, 0x36, 0x6f, 0xf2, 0x30, 0x21, 0x1e, 0xff, 0x97, 0xec, 0xfc, 0xfe, 0xb7, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xe8, 0x09, 0x4a, 0x7f, 0x9a, 0x06, 0x00, 0x00,
}

func (m *DelegateAllianceEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegateAllianceEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegateAllianceEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.NewShares.Size()
		i -= size
		if _, err := m.NewShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Coin.Size()
		i -= size
		if _, err := m.Coin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AllianceSender) > 0 {
		i -= len(m.AllianceSender)
		copy(dAtA[i:], m.AllianceSender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AllianceSender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndelegateAllianceEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegateAllianceEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegateAllianceEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CompletionTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintEvents(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	{
		size := m.Coin.Size()
		i -= size
		if _, err := m.Coin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AllianceSender) > 0 {
		i -= len(m.AllianceSender)
		copy(dAtA[i:], m.AllianceSender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AllianceSender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RedelegateAllianceEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedelegateAllianceEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedelegateAllianceEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CompletionTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintEvents(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x2a
	{
		size := m.Coin.Size()
		i -= size
		if _, err := m.Coin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.DestinationValidator) > 0 {
		i -= len(m.DestinationValidator)
		copy(dAtA[i:], m.DestinationValidator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DestinationValidator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceValidator) > 0 {
		i -= len(m.SourceValidator)
		copy(dAtA[i:], m.SourceValidator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceValidator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AllianceSender) > 0 {
		i -= len(m.AllianceSender)
		copy(dAtA[i:], m.AllianceSender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AllianceSender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimAllianceRewardsEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimAllianceRewardsEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimAllianceRewardsEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Coins[iNdEx].Size()
				i -= size
				if _, err := m.Coins[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AllianceSender) > 0 {
		i -= len(m.AllianceSender)
		copy(dAtA[i:], m.AllianceSender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AllianceSender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeductAllianceAssetsEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeductAllianceAssetsEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeductAllianceAssetsEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DelegateAllianceEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AllianceSender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.NewShares.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *UndelegateAllianceEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AllianceSender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *RedelegateAllianceEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AllianceSender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SourceValidator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DestinationValidator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *ClaimAllianceRewardsEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AllianceSender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *DeductAllianceAssetsEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DelegateAllianceEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegateAllianceEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegateAllianceEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllianceSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllianceSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegateAllianceEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegateAllianceEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegateAllianceEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllianceSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllianceSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedelegateAllianceEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedelegateAllianceEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedelegateAllianceEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllianceSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllianceSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimAllianceRewardsEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimAllianceRewardsEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimAllianceRewardsEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllianceSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllianceSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeductAllianceAssetsEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeductAllianceAssetsEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeductAllianceAssetsEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
